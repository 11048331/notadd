#!/usr/bin/env php
<?php
if (PHP_MAJOR_VERSION < 7) {
    echo "Aerys must be run with at least PHP 7.\nUsed PHP version: " . phpversion() . "\n";
    exit(1);
}
$help = <<<EOT

     _   _       _            _     _ 
    | \ | |     | |          | |   | |
    |  \| | ___ | |_ __ _  __| | __| |
    | . ` |/ _ \| __/ _` |/ _` |/ _` |
    | |\  | (_) | || (_| | (_| | (_| |
    |_| \_|\___/ \__\__,_|\__,_|\__,_|


    -c, --config      Define a custom server config path
    -d, --debug       Start the server in debug mode
    -h, --help        Display the help screen
    -l, --log         Set the minimum log output level (default: warning (debug in debug mode))
    -r, --restart     Restart a running Aerys server with that config
    -u, --user        Indicates to which user the server will switch after startup (under *nix) (overrides Options value).
    -w, --workers     Manually specify worker count (default: CPU core count)
        --color       Use ANSI codes in output (auto|on|off default: auto)

    Example Usage:
    server --help
    server --color off --log info
    server --config /path/to/app/config.php -w 4
    server --remote 23456 --log warning

EOT;
// some command line SAPIs (e.g. phpdbg) don't have that function
if (function_exists("cli_set_process_title")) {
    @cli_set_process_title("aerys");
}
error_reporting(E_ALL);
(function () {
    $paths = [
        realpath(__DIR__ . "/vendor/autoload.php"),
    ];
    foreach ($paths as $path) {
        if (file_exists($path)) {
            $autoloadPath = $path;
            break;
        }
    }
    if (!isset($autoloadPath)) {
        fwrite(STDERR, "Could not locate autoload.php");
        fwrite(STDERR, PHP_EOL);
        exit(1);
    }
    require $autoloadPath;
})();
$climate = new League\CLImate\CLImate;
$climate->arguments->add([
    "color"   => [
        "castTo"       => "string",
        "defaultValue" => "auto",
        "description"  => "Use ANSI codes in output",
        "longPrefix"   => "color",
    ],
    "config"  => [
        "defaultValue" => "vendor/notadd/server/configuration.php",
        "description"  => "Define a custom server config path",
        "longPrefix"   => "config",
        "prefix"       => "c",
    ],
    "debug"   => [
        "description" => "Start the server in debug mode",
        "longPrefix"  => "debug",
        "noValue"     => true,
        "prefix"      => "d",
    ],
    "help"    => [
        "description" => "Display the help screen",
        "longPrefix"  => "help",
        "noValue"     => true,
        "prefix"      => "h",
    ],
    "log"     => [
        "defaultValue" => "warning",
        "description"  => "Set the minimum log output level",
        "longPrefix"   => "log",
        "prefix"       => "l",
    ],
    "restart" => [
        "description" => "Gracefully restart the workers",
        "longPrefix"  => "restart",
        "noValue"     => true,
        "prefix"      => "r",
    ],
    "user"    => [
        "prefix"      => "u",
        "longPrefix"  => "user",
        "description" => "Indicates the user the server will switch to",
    ],
    "workers" => [
        "castTo"      => "int",
        "description" => "Manually specify worker count",
        "prefix"      => "w",
        "longPrefix"  => "workers",
    ],
]);
$console = new Aerys\Console($climate);
try {
    if ($console->isArgDefined("help")) {
        echo $help;
        echo fwrite(STDERR, PHP_EOL);
        exit(0);
    }
} catch (Exception $e) {
    echo "Invalid arguments: " . $e->getMessage() . "\n\n";
    echo $help;
    exit(1);
}
Amp\Loop::run(function () use ($console) {
    $logger = new Aerys\ConsoleLogger($console);
    $process = ($console->isArgDefined("debug") || PHP_SAPI === "phpdbg")
        ? new Aerys\DebugProcess($logger)
        : new Aerys\WatcherProcess($logger);
    yield from $process->start($console);
});
